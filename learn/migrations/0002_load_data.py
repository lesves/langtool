# Generated by Django 4.1.1 on 2023-02-26 18:26

from django.db import migrations
import csv
import re
import tqdm


pairs = [
    ("cs", "ru"),
]


def load_sentences(apps, schema_editor):
    # Setup languages
    Language = apps.get_model("learn", "Language")
    Language.objects.bulk_create([
        Language(code="cs", name="Czech", native_name="Čeština"),
        Language(code="ru", name="Russian", native_name="Русский"),
    ])

    Sentence = apps.get_model("learn", "Sentence")

    print()
    for tcode, scode in pairs:
        print(f"Loading {scode}-{tcode} sentences.")
        with open(f"data/{scode}-{tcode}.tsv") as f:
            # Skip BOM
            if f.read(1) != "\ufeff":
                f.seek(0)

            reader = csv.reader(f, delimiter="\t")

            for sent_id, sent_text, trans_id, trans_text in tqdm.tqdm(reader):
                sent_id = int(sent_id.strip())
                trans_id = int(trans_id.strip())

                sent, _ = Sentence.objects.get_or_create(link_id=sent_id, text=sent_text, lang=Language.objects.get(code=scode))
                trans, _ = Sentence.objects.get_or_create(link_id=trans_id, text=trans_text, lang=Language.objects.get(code=tcode))
                sent.translations.add(trans)


def load_voice(apps, schema_editor):
    Language = apps.get_model("learn", "Language")
    Sentence = apps.get_model("learn", "Sentence")

    for _, code in pairs:
        lang = Language.objects.get(code=code)

        print(f"Loading {lang.name} audios.")
        with open(f"data/commonvoice/{code}/clips.tsv") as f:
            reader = csv.reader(f, delimiter="\t")
            for i, (path, text) in tqdm.tqdm(enumerate(reader)):
                sent = Sentence(lang=lang, text=text)
                sent.audio.name = path
                sent.save()


from wordfreq import word_frequency
from nltk.tokenize import word_tokenize

def create_tasks(apps, schema_editor):
    Language = apps.get_model("learn", "Language")
    Sentence = apps.get_model("learn", "Sentence")
    Task = apps.get_model("learn", "Task")

    for _, code in pairs:
        print(f"Creating tasks for {code}.")

        lang = Language.objects.get(code=code)
        for sent in Sentence.objects.filter(lang=lang):
            _, rarest_idx = min([(wf, i) for i, tok in enumerate(word_tokenize(sent.text, lang.name)) if (wf := word_frequency(tok, "ru")) > 0])
            task = Task.objects.create(sentence=sent, hidden=rarest_idx)


class Migration(migrations.Migration):

    dependencies = [
        ('learn', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_sentences, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(load_voice, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(create_tasks, reverse_code=migrations.RunPython.noop),
    ]
